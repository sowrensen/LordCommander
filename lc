#!/usr/bin/env python3
"""
| ---------------------------------------------------------------------
| lc.py
| ---------------------------------------------------------------------
| LordCommander (hence, lc.py) is a python program to run a shell
| command recursively through predefined directories.
|
| Version: 3.0
| License: GNU General Public License 3
"""

import os
import shelve
from fire import Fire
from utils import Utils
from output import Output
from color_codes import ColorCodes
from controllers import DirectoryController, CommandController, ProjectController


class LordCommander:
    """
    üêà Run a shell command recursively throughout the predefined directories.
    """
    
    def __init__(self):
        try:
            self._lcdb = self._read_data()
            self.dirs = DirectoryController(self._lcdb)
            self.utils = Utils(self._lcdb)
            self.proj = ProjectController(self._lcdb)
        except IOError as error:
            Output.write(error)
            
    def _read_data(self):
        try:
            # Read files or create them if doesn't exist
            if not os.path.exists('.files'):
                os.mkdir('.files')
            lcdb = shelve.open('.files/lcdb', writeback=True)
            if 'active' not in lcdb or lcdb['active'] == '':
                lcdb['active'] = ""
                Output.write("No active project is set! Select an active project please.", ColorCodes.WARNING)
                proj = ProjectController(lcdb)
                proj.active()
            return lcdb
        except:
            Output.write("\nAborted, no action has been taken.")
    
    def run(self, command, li=0, ui=None):
        """
        Run a shell command throughout the saved directories.
        :param command: The command to run
        :param li: Lower index (optional)
        :param ui: Upper index (optional)
        """
        cc = CommandController()
        cc.run(self._lcdb, command, li, ui)


if __name__ == "__main__":
    # The event horizon
    Fire(LordCommander)
